g
UPES-500061070+Ace@upes-500061070 MINGW32 ~ (master)
$ git add help
fatal: pathspec 'help' did not match any files

UPES-500061070+Ace@upes-500061070 MINGW32 ~ (master)
$ git add--help
git: 'add--help' is not a git command. See 'git --help'.

UPES-500061070+Ace@upes-500061070 MINGW32 ~ (master)
$ git help
usage: git [--version] [--help] [-C <path>] [-c name=value]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone      Clone a repository into a new directory
   init       Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add        Add file contents to the index
   mv         Move or rename a file, a directory, or a symlink
   reset      Reset current HEAD to the specified state
   rm         Remove files from the working tree and from the index

examine the history and state (see also: git help revisions)
   bisect     Use binary search to find the commit that introduced a bug
   grep       Print lines matching a pattern
   log        Show commit logs
   show       Show various types of objects
   status     Show the working tree status

grow, mark and tweak your common history
   branch     List, create, or delete branches
   checkout   Switch branches or restore working tree files
   commit     Record changes to the repository
   diff       Show changes between commits, commit and working tree, etc
   merge      Join two or more development histories together
   rebase     Reapply commits on top of another base tip
   tag        Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch      Download objects and refs from another repository
   pull       Fetch from and integrate with another repository or a local branch
   push       Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.

UPES-500061070+Ace@upes-500061070 MINGW32 ~ (master)
$ git add --help

UPES-500061070+Ace@upes-500061070 MINGW32 ~ (master)
$ git help add

UPES-500061070+Ace@upes-500061070 MINGW32 ~ (master)
$ g -u
bash: g: command not found

UPES-500061070+Ace@upes-500061070 MINGW32 ~ (master)
$ g-u
bash: g-u: command not found

UPES-500061070+Ace@upes-500061070 MINGW32 ~ (master)
$ g update
bash: g: command not found

UPES-500061070+Ace@upes-500061070 MINGW32 ~ (master)
$ git add --update

UPES-500061070+Ace@upes-500061070 MINGW32 ~ (master)
$ cd e:

UPES-500061070+Ace@upes-500061070 MINGW32 /e
$ ls
'$RECYCLE.BIN'/
 berserk/
 Bleach/
 Config.Msi/
'death note'/
 draco/
'Flash tutorials'/
'FullMetal Alchemist BrotherHood'/
 Gamewares/
 Hardware.ini
 LOG/
'MICROSOFT Office PRO Plus 2016 v16.0.4266.1003 RTM   Activator [TechTools]'/
 Monster/
'My Games'/
'New folder'/
'New folder (2)'/
'NFS MOST WANTED'/
'Program Files'/
 qwerty/
'Stranger Things'/
'Sword Art Online'/
 sys/
'System Volume Information'/
 w2/

UPES-500061070+Ace@upes-500061070 MINGW32 /e
$ cd w2

UPES-500061070+Ace@upes-500061070 MINGW32 /e/w2 (master)
$ ls
e.py  helloworld.cpp  q.cpp  r.txt  t.c  w.jpeg  y.png

UPES-500061070+Ace@upes-500061070 MINGW32 /e/w2 (master)
$ vi qwerty.lol

UPES-500061070+Ace@upes-500061070 MINGW32 /e/w2 (master)
$ git status
On branch master
Your branch is up to date with 'origin2/master'.

Untracked files:
  (use "git add <file>..." to include in what will be committed)

        qwerty.lol

nothing added to commit but untracked files present (use "git add" to track)

UPES-500061070+Ace@upes-500061070 MINGW32 /e/w2 (master)
$ git add qwerty.lol
warning: LF will be replaced by CRLF in qwerty.lol.
The file will have its original line endings in your working directory.

UPES-500061070+Ace@upes-500061070 MINGW32 /e/w2 (master)
$ git add -u

UPES-500061070+Ace@upes-500061070 MINGW32 /e/w2 (master)
$ git status
On branch master
Your branch is up to date with 'origin2/master'.

Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        new file:   qwerty.lol


UPES-500061070+Ace@upes-500061070 MINGW32 /e/w2 (master)
$ git add --update new
fatal: pathspec 'new' did not match any files

UPES-500061070+Ace@upes-500061070 MINGW32 /e/w2 (master)
$ git add --update w2
fatal: pathspec 'w2' did not match any files

UPES-500061070+Ace@upes-500061070 MINGW32 /e/w2 (master)
$ ls
e.py  helloworld.cpp  q.cpp  qwerty.lol  r.txt  t.c  w.jpeg  y.png

UPES-500061070+Ace@upes-500061070 MINGW32 /e/w2 (master)
$ mkdir das

UPES-500061070+Ace@upes-500061070 MINGW32 /e/w2 (master)
$ ls
das/  e.py  helloworld.cpp  q.cpp  qwerty.lol  r.txt  t.c  w.jpeg  y.png

UPES-500061070+Ace@upes-500061070 MINGW32 /e/w2 (master)
$ git add --update das

UPES-500061070+Ace@upes-500061070 MINGW32 /e/w2 (master)
$ git add --edit
fatal: Empty patch. Aborted.

UPES-500061070+Ace@upes-500061070 MINGW32 /e/w2 (master)
$ cat qwerty.lol

lol
didn't it would open


UPES-500061070+Ace@upes-500061070 MINGW32 /e/w2 (master)
$ vi rex.txt

UPES-500061070+Ace@upes-500061070 MINGW32 /e/w2 (master)
$ vi dex.txt

UPES-500061070+Ace@upes-500061070 MINGW32 /e/w2 (master)
$ diff -u rex.txt dex.txt>wex.patch

UPES-500061070+Ace@upes-500061070 MINGW32 /e/w2 (master)
$ cat wex.patch
--- rex.txt     2018-02-13 16:17:52.827260800 +0530
+++ dex.txt     2018-02-13 16:18:34.582709300 +0530
@@ -1,3 +1,3 @@
-thi is line 1
+this is line sparta
 this is line 2


UPES-500061070+Ace@upes-500061070 MINGW32 /e/w2 (master)
$ git fetch --all
Fetching origin
Fetching origin2

UPES-500061070+Ace@upes-500061070 MINGW32 /e/w2 (master)
$ cat dex.txt
this is line sparta
this is line 2


UPES-500061070+Ace@upes-500061070 MINGW32 /e/w2 (master)
$ cat rex.txt
thi is line 1
this is line 2


UPES-500061070+Ace@upes-500061070 MINGW32 /e/w2 (master)
$
today we learned about various features of help command by adding it after git <command> --help
<command> it can be replaced by different git commands for example add,fetch etc
and today i learned about diff command 
which tells the difference in version and content of two files 
to use it simply we can write 
diff -u <file1> <file2>